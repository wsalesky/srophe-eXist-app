<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns="http://www.w3.org/1999/xhtml" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    xmlns:t="http://www.tei-c.org/ns/1.0" 
    xmlns:s="http://syriaca.org" 
    xmlns:saxon="http://saxon.sf.net/" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    xmlns:local="http://syriaca.org/ns" 
    xmlns:fo="http://www.w3.org/1999/XSL/Format" 
    exclude-result-prefixes="xs t s saxon" version="2.0">

 <!-- ================================================================== 
       This file is part of the Syriac Reference Portal Places Application.
       
       The Syriac Reference Portal Places Application is free software: 
       you can redistribute it and/or modify it under the terms of the GNU 
       General Public License as published by the Free Software Foundation, 
       either version 3 of the License, or (at your option) any later 
       version.
       
       The Syriac Reference Portal Places Application is distributed in 
       the hope that it will be useful, but WITHOUT ANY WARRANTY; without 
       even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
       PARTICULAR PURPOSE.  See the GNU General Public License for more 
       details.
       
       You should have received a copy of the GNU General Public License
       along with the Syriac Reference Portal Places Application.  If not,
       see (http://www.gnu.org/licenses/).
       
       ================================================================== --> 
 
 <!-- ================================================================== 
       placepage-xslfo.xsl
       
       This XSLT transforms places xml generated by place.xql (TEI) files to pdf.
       
       ================================================================== -->
    <xsl:import href="helper-functions.xsl"/>
    <xsl:import href="citation-pdf.xsl"/>
    <xsl:import href="bibliography-pdf.xsl"/>
    <xsl:import href="collations.xsl"/>
    <xsl:output name="xml" encoding="UTF-8" indent="yes"/>


 <!-- =================================================================== -->
 <!-- Attribute sets -->
 <!-- =================================================================== -->
    <xsl:attribute-set name="h1">
        <xsl:attribute name="font-size">14pt</xsl:attribute>
        <xsl:attribute name="font-weight">600</xsl:attribute>
        <xsl:attribute name="color">#333333</xsl:attribute>
        <xsl:attribute name="margin-top">24pt</xsl:attribute>
        <xsl:attribute name="margin-bottom">12pt</xsl:attribute>
        <xsl:attribute name="border-bottom">1pt solid #333333</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="h3">
        <xsl:attribute name="font-size">12pt</xsl:attribute>
        <xsl:attribute name="font-weight">600</xsl:attribute>
        <xsl:attribute name="color">#333333</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="h4">
        <xsl:attribute name="font-size">10pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
        <xsl:attribute name="color">#333333</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="font-small">
        <xsl:attribute name="font-size">9pt</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="href">
        <xsl:attribute name="color">blue</xsl:attribute>
        <xsl:attribute name="text-decoration">underline</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="bold">
        <xsl:attribute name="font-weight">600</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="caveat">
        <xsl:attribute name="font-size">10pt</xsl:attribute>
        <xsl:attribute name="font-style">italic</xsl:attribute>
        <xsl:attribute name="color">grey</xsl:attribute>
        <xsl:attribute name="margin-top">4pt</xsl:attribute>
        <xsl:attribute name="margin-left">8pt</xsl:attribute>
        <xsl:attribute name="margin-right">8pt</xsl:attribute>
        <xsl:attribute name="margin-bottom">4pt</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="list-block">
        <xsl:attribute name="provisional-distance-between-starts">18pt</xsl:attribute>
        <xsl:attribute name="provisional-label-separation">3pt</xsl:attribute>
        <xsl:attribute name="margin-left">12pt</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="def-list">
        <xsl:attribute name="margin-left">12pt</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="def-list">
        <xsl:attribute name="margin-top">18pt</xsl:attribute>
        <xsl:attribute name="margin-right">18pt</xsl:attribute>
        <xsl:attribute name="margin-bottom">18pt</xsl:attribute>
        <xsl:attribute name="margin-left">18pt</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="p">
        <xsl:attribute name="margin">8pt</xsl:attribute>
    </xsl:attribute-set>
    <xsl:attribute-set name="syr">
        <xsl:attribute name="font-family">Estrangelo Nisibin</xsl:attribute>
    </xsl:attribute-set>
    <!-- Parameters used by xslt -->
    <xsl:param name="normalization">NFKC</xsl:param>
    <!-- NOTE: Change to eXist xml -->
    <xsl:param name="xmlbase">../../data/places/tei/xml/</xsl:param>
    <xsl:param name="editoruriprefix">http://syriaca.org/editors.xml#</xsl:param>
    <xsl:variable name="editorssourcedoc">../../documentation/editors.xml</xsl:variable>
    <xsl:param name="uribase">http://syriaca.org/place/</xsl:param>
    <xsl:variable name="placenum" select="substring-after(/descendant::*/t:place[1]/@xml:id,'place-')"/>
    <xsl:variable name="pageHeader">
        <xsl:call-template name="place-title-std"/>
    </xsl:variable>
    
    <!-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| -->
    <!-- |||| Root template matches tei root -->
    <!-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| -->
    <xsl:template match="/">
        <fo:root>
            <fo:layout-master-set>
                <fo:simple-page-master master-name="contents" page-width="8.5in" page-height="11in" margin-top="0.25in" margin-bottom="0.5in" margin-left="0.5in" margin-right="0.5in">
                    <fo:region-body margin="0.5in" margin-bottom="1in"/>
                    <fo:region-before extent="0.75in"/>
                    <fo:region-after extent="0.2in"/>
                </fo:simple-page-master>
            </fo:layout-master-set>
            <fo:page-sequence master-reference="contents">
                <fo:static-content flow-name="xsl-region-after">
                    <fo:block border-top-style="solid" border-top-color="#666666" border-top-width=".015in" padding-top=".025in" margin-bottom="0in" padding-after="0in" padding-bottom="0">
                        <fo:block color="gray" padding-top="0in" margin-top="-0.015in" border-top-style="solid" border-top-color="#gray" border-top-width=".01in" xsl:use-attribute-sets="font-small">
                            <fo:block margin-top="4pt">
                                <fo:block text-align="center">Copyright Vanderbilt University, Princeton University, and the Contributor(s), 2014.</fo:block>
                                <fo:block text-align="center">
                                    <xsl:text> Page </xsl:text>
                                    <fo:page-number/>
                                </fo:block>
                            </fo:block>
                        </fo:block>
                    </fo:block>
                </fo:static-content>
                <fo:flow flow-name="xsl-region-body" font-family="Arial Unicode MS" font-size="10pt">
                    <fo:block>
                        <xsl:apply-templates select="//t:place"/>    
                    </fo:block>
                </fo:flow>
            </fo:page-sequence>
        </fo:root>
  </xsl:template>
    
<!-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| -->
<!-- |||| Place templates -->
<!-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| -->
    <xsl:template match="t:place">
        <fo:block xsl:use-attribute-sets="h1">
            <!-- Format title, calls template in place-title-std.xsl -->
            <xsl:value-of select="$pageHeader"/>    
        </fo:block>       
        <!-- End Title -->
        <!-- Abstract -->
        <xsl:apply-templates select="t:desc[@type='abstract' or starts-with(@xml:id, 'abstract-en')][1]" mode="abstract"/>   
        <fo:table border="none">
            <fo:table-column column-width="40%"/>
            <fo:table-column column-width="60%"/>
            <fo:table-body>
                <fo:table-row>
                    <fo:table-cell>
                        <xsl:for-each select="t:idno[contains(.,'syriaca.org')]">
                            <fo:block margin="8pt">
                                <!--<fo:basic-link external-destination="url('http://syriaca.org/documentation/terms.html#place-uri')" xsl:use-attribute-sets="href">                   
                                             ? Add helper circle? logo                     
                                    </fo:basic-link>
                                    -->
                                <fo:inline xsl:use-attribute-sets="bold">Place URI: </fo:inline> 
                                <fo:basic-link external-destination="url('{.}')" xsl:use-attribute-sets="href">
                                    <xsl:value-of select="."/>
                                </fo:basic-link>
                            </fo:block>
                        </xsl:for-each>
                        
                        <fo:block margin="8pt">
                            <fo:inline xsl:use-attribute-sets="bold">Place Type: </fo:inline>
                            <fo:basic-link external-destination="url('http://syriaca.org/documentation/types.html#{normalize-space(@type)}')">
                                <xsl:value-of select="@type"/>
                            </fo:basic-link>
                        </fo:block>
                        
                    </fo:table-cell>
                    <fo:table-cell>
                        <xsl:if test="t:location">
                            <fo:block margin="8pt" >    
                                <xsl:apply-templates select="t:location"/>
                            </fo:block>    
                        </xsl:if>
                    </fo:table-cell>
                </fo:table-row>
            </fo:table-body>
        </fo:table>
        <!-- Start place content -->

        <fo:block xsl:use-attribute-sets="p">
            <fo:block xsl:use-attribute-sets="h3">Names</fo:block>
            <fo:list-block xsl:use-attribute-sets="list-block">
                <xsl:apply-templates select="t:placeName[@syriaca-tags='#syriaca-headword' and @xml:lang='syr']" mode="list">
                    <xsl:sort lang="syr" select="."/>
                </xsl:apply-templates>
                <xsl:apply-templates select="t:placeName[@syriaca-tags='#syriaca-headword' and @xml:lang='en']" mode="list">
                    <xsl:sort collation="{$mixed}" select="."/>
                </xsl:apply-templates>
                <xsl:apply-templates select="t:placeName[(not(@syriaca-tags) or @syriaca-tags!='#syriaca-headword') and starts-with(@xml:lang, 'syr')]" mode="list">
                    <xsl:sort lang="syr" select="."/>
                </xsl:apply-templates>
                <xsl:apply-templates select="t:placeName[starts-with(@xml:lang, 'ar')]" mode="list">
                    <xsl:sort lang="ar" select="."/>
                </xsl:apply-templates>
                <xsl:apply-templates select="t:placeName[(not(@syriaca-tags) or @syriaca-tags!='#syriaca-headword') and not(starts-with(@xml:lang, 'syr') or starts-with(@xml:lang, 'ar'))]" mode="list">
                    <xsl:sort collation="{$mixed}" select="."/>
                </xsl:apply-templates>
            </fo:list-block>
        </fo:block>

        <xsl:if test="not(exists(t:desc)) or string-length(t:desc[not(starts-with(@xml:id,'abstract'))][1]) &lt; 1">
            <xsl:call-template name="sources"/>
        </xsl:if>
        <xsl:if test="string-length(t:desc[not(starts-with(@xml:id,'abstract'))][1]) &gt; 1">
            <fo:block xsl:use-attribute-sets="p">
                <fo:block xsl:use-attribute-sets="h3">Brief Descriptions</fo:block>
                <fo:list-block xsl:use-attribute-sets="list-block">
                    <xsl:for-each-group select="t:desc" group-by="if (contains(@xml:lang, '-')=true()) then substring-before(@xml:lang, '-') else @xml:lang">
                        <xsl:sort collation="{$languages}" select="if (contains(@xml:lang, '-')=true()) then substring-before(@xml:lang, '-') else @xml:lang"/>
                        <xsl:for-each select="current-group()">
                            <xsl:sort lang="{current-grouping-key()}" select="normalize-space(.)"/>
                            <xsl:apply-templates select="."/>
                        </xsl:for-each>
                    </xsl:for-each-group>
                </fo:list-block>
            </fo:block>
        </xsl:if>
        <!-- 
                Checks for nested locations, nested location is added to the tei via record.xql
                XML ouput:
                    <nested-places xmlns="http://www.w3.org/1999/xhtml" id="place-1721" type="">
                        <placeName xmlns="http://www.tei-c.org/ns/1.0" xml:id="name1721-1" xml:lang="en" syriaca-tags="#syriaca-headword" source="#bib1721-1">Shūrzāq</placeName>
                    </nested-places>
            -->
        <xsl:if test="/child::*/nested-place">
            <fo:block xsl:use-attribute-sets="p">
                <fo:block xsl:use-attribute-sets="h3">Contains</fo:block>
                <fo:list-block xsl:use-attribute-sets="list-block">
                    <xsl:for-each select="/child::*/nested-place">
                        <xsl:sort collation="{$mixed}" select="t:placeName[@xml:lang='en'][1]/@reg"/>
                        <fo:list-item>
                            <fo:list-item-label end-indent="label-end()">
                                <fo:block>&#8226;</fo:block>
                            </fo:list-item-label>
                            <fo:list-item-body start-indent="body-start()">
                                <fo:block>
                                    <fo:basic-link external-destination="url('http://syriaca.org/place/{@id}')" xsl:use-attribute-sets="href">
                                        <xsl:choose>
                                            <xsl:when test="t:placeName/@xml:lang='syr' or t:placeName/@xml:lang='ar' or t:placeName/@xml:lang='syc'">
                                                <fo:bidi-override unicode-bidi="bidi-override" direction="rtl">
                                                    <xsl:value-of select="."/>            
                                                </fo:bidi-override>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="."/>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </fo:basic-link>
                                </fo:block>
                            </fo:list-item-body>
                        </fo:list-item>
                    </xsl:for-each>
                </fo:list-block>
            </fo:block>
        </xsl:if>
        <!-- Build related places and people if they exist -->
        <xsl:if test="../t:relation">
            <fo:block xsl:use-attribute-sets="p">
                <fo:block xsl:use-attribute-sets="h3">Related Places</fo:block>
                <!--
                <fo:list-block xsl:use-attribute-sets="list-block">
                    <xsl:apply-templates select="//t:related-items"/>
                </fo:list-block>
                -->
            </fo:block>
        </xsl:if>
        <!-- Events without @type="attestation" -->
        <xsl:if test="t:event[not(@type='attestation')]">
            <fo:block xsl:use-attribute-sets="p">
                <fo:block xsl:use-attribute-sets="h3">Events</fo:block>
                <fo:list-block xsl:use-attribute-sets="list-block">
                    <xsl:apply-templates select="t:event[not(@type='attestation')]" mode="event"/>
                </fo:list-block>
            </fo:block>
        </xsl:if> 
        <!-- Events with @type="attestation" -->
        <xsl:if test="t:event[@type='attestation']">
            <fo:block xsl:use-attribute-sets="p">
                <fo:block xsl:use-attribute-sets="h3">Attestations</fo:block>
                <fo:list-block xsl:use-attribute-sets="list-block">
                    <!-- Sorts events on dates, checks first for @notBefore and if not present, uses @when -->
                    <xsl:for-each select="t:event[@type='attestation']">
                        <xsl:sort select="if(exists(@notBefore)) then @notBefore else @when"/>
                        <xsl:apply-templates select="." mode="event"/>
                    </xsl:for-each>
                </fo:list-block>
            </fo:block>
        </xsl:if>
        <!-- Calls named template to pull confession information -->
        <xsl:if test="t:state[@type='confession']">
            <fo:block xsl:use-attribute-sets="p">
                <fo:block xsl:use-attribute-sets="h3">Known Religious Communities</fo:block>
                <fo:block xsl:use-attribute-sets="caveat">This list is not necessarily exhaustive, and the order does not represent importance or proportion of the population. Dates do not represent starting or ending dates of a group's presence, but rather when they are attested. Instead, the list only represents groups for which Syriaca.org has source(s) and dates.</fo:block>
                <xsl:call-template name="confessions"/>                
            </fo:block>
        </xsl:if>
        <!-- Note type Incerta  -->
        <xsl:if test="t:note[@type='incerta']">
            <fo:block xsl:use-attribute-sets="p">
                <fo:block xsl:use-attribute-sets="h3">Incerta</fo:block>
                <fo:list-block xsl:use-attribute-sets="list-block">
                    <xsl:apply-templates select="t:note[@type='incerta']"/>
                </fo:list-block>
            </fo:block>
        </xsl:if>
        <!-- Note type Incerta  -->
        <xsl:if test="t:note[@type='errata']">
            <fo:block xsl:use-attribute-sets="p">
                <fo:block xsl:use-attribute-sets="h3">Errata</fo:block>
                <fo:list-block xsl:use-attribute-sets="list-block">
                    <xsl:apply-templates select="t:note[@type='errata']"/>
                </fo:list-block>
            </fo:block>
        </xsl:if>
        <!-- Note type corrigenda  -->
        <xsl:if test="t:note[@type='corrigenda']">
            <fo:block xsl:use-attribute-sets="p">
                <fo:block xsl:use-attribute-sets="h3">Corrigenda</fo:block>
                <fo:list-block xsl:use-attribute-sets="list-block">
                    <xsl:apply-templates select="t:note[@type='corrigenda']"/>
                </fo:list-block>
            </fo:block>
        </xsl:if>

        <xsl:call-template name="see-also"/>
        <xsl:call-template name="sources"/>
        <fo:block xsl:use-attribute-sets="p">
            <fo:block xsl:use-attribute-sets="h3">How to Cite This Entry</fo:block>
            <fo:block>
                <xsl:apply-templates select="//t:teiHeader/t:fileDesc/t:titleStmt" mode="cite-foot"/>
                <fo:block>
                    <fo:block xsl:use-attribute-sets="h4">Bibliography:</fo:block>
                    <xsl:apply-templates select="//t:teiHeader/t:fileDesc/t:titleStmt" mode="cite-biblist"/>
                    <fo:block xsl:use-attribute-sets="h4">About this Entry</fo:block>
                    <xsl:apply-templates select="//t:teiHeader/t:fileDesc/t:titleStmt" mode="about"/>
                    <fo:block xsl:use-attribute-sets="h4">Copyright and License for Reuse</fo:block>
                    <fo:block>
                        <xsl:text>Except otherwise noted, this page is © </xsl:text>
                        <xsl:value-of select="format-date(xs:date(//t:teiHeader/t:fileDesc/t:publicationStmt/t:date[1]), '[Y]')"/>.
                            <xsl:apply-templates select="//t:teiHeader/t:fileDesc/t:publicationStmt/t:availability/t:licence"/>
                    </fo:block>
                </fo:block>
            </fo:block>
        </fo:block>
    </xsl:template>

    <xsl:template name="see-also">
        <fo:block xsl:use-attribute-sets="p">
            <fo:block xsl:use-attribute-sets="h3">See Also</fo:block>
            <fo:list-block xsl:use-attribute-sets="list-block">
                <xsl:for-each select="t:idno[contains(.,'csc.org.il')]">
                    <fo:list-item>
                        <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                        <fo:list-item-body start-indent="body-start()">
                            <fo:block>
                                "<xsl:value-of select="substring-before(substring-after(normalize-space(.),'sK='),'&amp;sT=')"/>" in the Comprehensive Bibliography on Syriac Christianity
                                [<fo:basic-link xsl:use-attribute-sets="href" external-destination="{normalize-space(.)}">
                                    <xsl:value-of select="normalize-space(.)"/>
                                </fo:basic-link>]
                            </fo:block>
                        </fo:list-item-body>
                    </fo:list-item>
                </xsl:for-each>
                <!-- Pleiades links -->
                <xsl:for-each select="t:idno[contains(.,'pleiades')]">
                    <fo:list-item>
                        <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                        <fo:list-item-body start-indent="body-start()">
                            <fo:block>
                                <fo:external-graphic src="url('../resources/img/circle-pi-25.png')"/> View in Pleiades
                                [<fo:basic-link external-destination="{normalize-space(.)}" xsl:use-attribute-sets="href">
                                    <xsl:value-of select="normalize-space(.)"/>
                                    </fo:basic-link>]
                            </fo:block>
                        </fo:list-item-body>
                    </fo:list-item>
                </xsl:for-each>
                <!-- Google map links -->
                <xsl:for-each select="t:location[@type='gps']/t:geo">
                    <xsl:variable name="geoRef">
                        <xsl:variable name="coords" select="tokenize(normalize-space(.), '\s+')"/>
                        <xsl:value-of select="$coords[2]"/>
                        <xsl:text>, </xsl:text>
                        <xsl:value-of select="$coords[1]"/>
                    </xsl:variable>
                    <fo:list-item>
                        <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                        <fo:list-item-body start-indent="body-start()">
                            <fo:block>
                                View in Google Maps
                                 [<fo:basic-link external-destination="https://maps.google.com/maps?f=q&amp;hl=en&amp;z=4&amp;q=http://syriaca.org/geo/atom.xql?id={$placenum}" xsl:use-attribute-sets="href">
                                     <xsl:value-of select="concat('https://maps.google.com/maps?f=q&amp;hl=en&amp;z=4&amp;q=http://syriaca.org/geo/atom.xql?id=',$placenum)"/>
                                </fo:basic-link>]
                            </fo:block>
                        </fo:list-item-body>
                    </fo:list-item>
                </xsl:for-each>
                
                <!-- TEI source link -->
                <fo:list-item>
                    <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                    <fo:list-item-body start-indent="body-start()">
                        <fo:block>
                            TEI XML source data [<fo:basic-link external-destination="http://syriaca.org/place/tei/{$placenum}" xsl:use-attribute-sets="href">
                                <fo:external-graphic src="url('../resources/img/tei-25.png')"/><xsl:value-of select="concat('http://syriaca.org/place/tei/',$placenum)"/>
                            </fo:basic-link>]
                        </fo:block>
                    </fo:list-item-body>
                </fo:list-item>
                <!-- Wikipedia links -->
                <xsl:for-each select="t:idno[contains(.,'wikipedia')]">
                    <xsl:variable name="get-title">
                        <xsl:value-of select="replace(tokenize(.,'/')[last()],'_',' ')"/>
                    </xsl:variable>
                    <fo:list-item>
                        <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                        <fo:list-item-body start-indent="body-start()">
                            <fo:block>
                                <fo:basic-link external-destination="{.}" xsl:use-attribute-sets="href">
                                    <fo:external-graphic src="url('../resources/img/Wikipedia-25.png')"/> "<xsl:value-of select="$get-title"/>" in Wikipedia
                                </fo:basic-link>
                            </fo:block>
                        </fo:list-item-body>
                    </fo:list-item>
                </xsl:for-each>
            </fo:list-block>
        </fo:block>
    </xsl:template>
    <xsl:template name="sources">   
        <!-- Sources -->
        <fo:block>
            <fo:block xsl:use-attribute-sets="h3">Sources</fo:block>
            <fo:block xsl:use-attribute-sets="caveat">
                    Any information without attribution has been created following the Syriaca.org 
                    <fo:basic-link external-destination="url('http://syriaca.org/documentation/')" xsl:use-attribute-sets="href">
                        editorial guidelines
                    </fo:basic-link>.
                </fo:block>
            <fo:list-block xsl:use-attribute-sets="list-block">
                <xsl:apply-templates select="t:bibl" mode="footnote"/>
            </fo:list-block>
        </fo:block>
    </xsl:template>
    <!-- Children of place element -->
    <!-- Place title -->
    <xsl:template name="place-title-std">
        <fo:inline-container writing-mode="lr-tb">
            <!-- English name -->
            <fo:block xml:lang="en">
                <xsl:value-of select="//t:placeName[@xml:lang='en'][@syriaca-tags='#syriaca-headword'][1]"/>
                <xsl:text> - </xsl:text>
            </fo:block>
        </fo:inline-container>
        <!-- Syriac name if available -->
        <xsl:choose>
            <xsl:when test="//t:placeName[@xml:lang='syr'][@syriaca-tags='#syriaca-headword'][1]">
                <fo:inline-container writing-mode="rl-tb">
                    <fo:block xml:lang="syr" xsl:use-attribute-sets="syr">
                        <xsl:value-of select="//t:placeName[@xml:lang='syr'][@syriaca-tags='#syriaca-headword'][1]"/>
                    </fo:block>
                </fo:inline-container>
            </xsl:when>
            <xsl:otherwise>
                <fo:inline-container writing-mode="lr-tb">
                    <!-- English name -->
                    <fo:block xml:lang="en">
                        [Syriac Not Available]
                    </fo:block>
                </fo:inline-container>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>    
    
    <!-- Template to print out events -->
    <xsl:template match="t:event" mode="event">
        <fo:list-item>
            <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
            <fo:list-item-body start-indent="body-start()">
                <fo:block>
                        <!-- There are several desc templates, this 'plain' mode ouputs all the child elements with no p or li tags -->
                    <xsl:apply-templates select="child::*" mode="plain"/>
                        <!-- Adds dates if available -->
                    <xsl:sequence select="local:do-dates(.)"/>
                        <!-- Adds footnotes if available -->
                    <xsl:if test="@source">
                        <xsl:sequence select="local:do-refs-pdf(@source,ancestor::t:*[@xml:lang][1])"/>
                    </xsl:if>
                </fo:block>
            </fo:list-item-body>
        </fo:list-item>
    </xsl:template>
    
    <!-- Named template to handle nested confessions -->
    <xsl:template name="confessions">
        <!-- Variable stores all confessions from confessions.xml -->
        <xsl:variable name="confessions" select="/child::*/t:confessions/descendant::t:list"/>
        <xsl:variable name="place-data" select="."/>
        <!-- Variable to store the value of the confessions of current place-->
        <xsl:variable name="current-confessions">
            <xsl:for-each select="t:state[@type='confession']">
                <xsl:variable name="id" select="substring-after(@ref,'#')"/>
                <!-- outputs current confessions as a space seperated list -->
                <xsl:value-of select="concat($id,' ')"/>
            </xsl:for-each>
        </xsl:variable>
        <!-- Works through the tree structure in the confessions.xml to output only the relevant confessions -->
        <xsl:for-each select="/child::*/t:confessions/descendant::t:list[1]">
            <fo:list-block xsl:use-attribute-sets="list-block">
            <!-- Checks for top level confessions that may have a match or a descendant with a match, supresses any that do not -->
                <xsl:if test="descendant-or-self::t:item[contains($current-confessions,@xml:id)]">
                    <!-- Goes through each item to check for a match or a child match -->
                    <xsl:for-each select="t:item">
                        <xsl:if test="descendant-or-self::t:item[contains($current-confessions,@xml:id)]">
                            <!-- output current level -->
                            <fo:list-item>
                                <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                                <fo:list-item-body start-indent="body-start()">
                                    <fo:block>
                                        <!-- print label -->
                                        <xsl:apply-templates select="t:label" mode="confessions"/>
                                        <!-- build dates based on attestation information -->
                                        <xsl:call-template name="confession-dates">
                                            <xsl:with-param name="place-data" select="$place-data"/>
                                            <xsl:with-param name="confession-id" select="@xml:id"/>
                                        </xsl:call-template>
                                    </fo:block>
                                <!-- check next level -->
                                    <xsl:if test="descendant::t:item[contains($current-confessions,@xml:id)]">
                                        <fo:list-block xsl:use-attribute-sets="list-block">
                                            <xsl:for-each select="child::*/t:item">
                                                <xsl:if test="descendant-or-self::t:item[contains($current-confessions,@xml:id)]">
                                                    <fo:list-item>
                                                        <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                                                        <fo:list-item-body start-indent="body-start()">
                                                            <fo:block>
                                                                <xsl:apply-templates select="t:label" mode="confessions"/>
                                                            <!-- build dates based on attestation information -->
                                                                <xsl:call-template name="confession-dates">
                                                                    <xsl:with-param name="place-data" select="$place-data"/>
                                                                    <xsl:with-param name="confession-id" select="@xml:id"/>
                                                                </xsl:call-template>
                                                            </fo:block>
                                                            <xsl:if test="descendant::t:item[contains($current-confessions,@xml:id)]">
                                                                <fo:list-block xsl:use-attribute-sets="list-block">
                                                                    <xsl:for-each select="child::*/t:item">
                                                                        <xsl:if test="descendant-or-self::t:item[contains($current-confessions,@xml:id)]">
                                                                            <fo:list-item>
                                                                                <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                                                                                <fo:list-item-body start-indent="body-start()">
                                                                                    <fo:block>
                                                                                        <xsl:apply-templates select="t:label" mode="confessions"/>
                                                                                <!-- build dates based on attestation information -->
                                                                                        <xsl:call-template name="confession-dates">
                                                                                            <xsl:with-param name="place-data" select="$place-data"/>
                                                                                            <xsl:with-param name="confession-id" select="@xml:id"/>
                                                                                        </xsl:call-template>
                                                                                    </fo:block>
                                                                                    <xsl:if test="descendant::t:item[contains($current-confessions,@xml:id)]">
                                                                                        <fo:list-block xsl:use-attribute-sets="list-block">
                                                                                            <xsl:for-each select="child::*/t:item">
                                                                                                <xsl:if test="descendant-or-self::t:item[contains($current-confessions,@xml:id)]">
                                                                                                    <fo:list-item>
                                                                                                        <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                                                                                                        <fo:list-item-body start-indent="body-start()">
                                                                                                            <fo:block>
                                                                                                                <xsl:apply-templates select="t:label" mode="confessions"/>
                                                                                                         <!-- build dates based on attestation information -->
                                                                                                                <xsl:call-template name="confession-dates">
                                                                                                                    <xsl:with-param name="place-data" select="$place-data"/>
                                                                                                                    <xsl:with-param name="confession-id" select="@xml:id"/>
                                                                                                                </xsl:call-template>
                                                                                                            </fo:block>
                                                                                                        </fo:list-item-body>
                                                                                                    </fo:list-item>
                                                                                                </xsl:if>
                                                                                            </xsl:for-each>
                                                                                        </fo:list-block>
                                                                                    </xsl:if>
                                                                                </fo:list-item-body>
                                                                            </fo:list-item>
                                                                        </xsl:if>
                                                                    </xsl:for-each>
                                                                </fo:list-block>
                                                            </xsl:if>
                                                        </fo:list-item-body>
                                                    </fo:list-item>
                                                </xsl:if>
                                            </xsl:for-each>
                                        </fo:list-block>
                                    </xsl:if>
                                </fo:list-item-body>
                            </fo:list-item>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:if>
            </fo:list-block>
        </xsl:for-each>
    </xsl:template>
    
    <!-- Create labels for confessions -->
    <xsl:template match="t:label" mode="confessions">
        <xsl:value-of select="."/>
    </xsl:template>
    
    <!-- Named template to build confession dates bassed on attestation dates -->
    <xsl:template name="confession-dates">
        <!-- param passes place data for processing -->
        <xsl:param name="place-data"/>
        <!-- confession id -->
        <xsl:param name="confession-id"/>
        <!-- find confessions in place data using confession-id -->
        <xsl:choose>
            <xsl:when test="$place-data//t:state[@type='confession' and substring-after(@ref,'#') = $confession-id]">
                <xsl:for-each select="$place-data//t:state[@type='confession' and substring-after(@ref,'#') = $confession-id]">
                    <!-- Build ref id to find attestations -->
                    <xsl:variable name="ref-id" select="concat('#',@xml:id)"/>
                    <!-- Find attestations with matching confession-id in link/@target  -->
                    <xsl:choose>
                        <xsl:when test="//t:event[@type='attestation' and child::*[contains(@target,$ref-id)] ]">
                            <!-- If there is a match process dates -->
                            (<xsl:for-each select="//t:event[@type='attestation' and t:link[contains(@target,$ref-id)] ]">
                                <!-- Sort dates -->
                                <xsl:sort select="if(exists(@notBefore)) then @notBefore else @when"/>
                                <xsl:choose>
                                    <!-- process @when dates use, local:trim-date function to trim 0 from dates-->
                                    <xsl:when test="./@when">
                                        <xsl:choose>
                                            <xsl:when test="position() = 1">attested as early as <xsl:value-of select="local:trim-date(@when)"/>
                                            </xsl:when>
                                            <xsl:when test="position()=last()">, as late as <xsl:value-of select="local:trim-date(@when)"/>
                                            </xsl:when>
                                            <xsl:otherwise/>
                                        </xsl:choose>
                                    </xsl:when>
                                    <!-- process @notBefore dates -->
                                    <xsl:when test="./@notBefore">
                                        <xsl:choose>
                                            <xsl:when test="position() = 1">
                                                attested around <xsl:value-of select="local:trim-date(@notBefore)"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                attested as early as <xsl:value-of select="local:trim-date(@notBefore)"/>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:when>
                                    <!-- process @notAfter dates -->
                                    <xsl:when test="./@notAfter">
                                        <xsl:if test="./@notBefore">, </xsl:if>as late as <xsl:value-of select="local:trim-date(@notAfter)"/>
                                    </xsl:when>
                                    <xsl:otherwise/>
                                </xsl:choose>
                            </xsl:for-each>)
                        </xsl:when>
                        <!-- If not attestation information -->
                        <xsl:otherwise> 
                            (no attestations yet recorded)
                        </xsl:otherwise>
                    </xsl:choose>
                    <!-- Add refs if they exist -->
                    <xsl:if test="@source">
                        <xsl:sequence select="local:do-refs-pdf(@source,'eng')"/>
                    </xsl:if>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise> 
                <!-- Checks for children with attestation information -->
                <xsl:variable name="child-id" select="string-join(descendant-or-self::t:item/@xml:id,' ')"/>
                   <!-- Find the first child with a match  -->
                <xsl:for-each select="$place-data//t:state[@type='confession' and contains($child-id,substring-after(@ref,'#'))][1]">
                    <xsl:for-each select="$place-data//t:state[@type='confession' and contains($child-id,substring-after(@ref,'#'))][1]">
                            <!-- Build ref id to find attestations -->
                        <xsl:variable name="ref-id" select="concat('#',@xml:id)"/>
                            <!-- Find attestations with matching confession-id in link/@target  -->
                        <xsl:if test="//t:event[@type='attestation' and child::*[contains(@target,$ref-id)]]">
                                    <!-- If there is a match process dates -->
                                    (<xsl:for-each select="//t:event[@type='attestation' and t:link[contains(@target,$ref-id)]]">
                                        <!-- Sort dates -->
                                <xsl:sort select="if(exists(@notBefore)) then @notBefore else @when"/>
                                <xsl:choose>
                                            <!-- process @when dates use, local:trim-date function to trim 0 from dates-->
                                    <xsl:when test="./@when">
                                        <xsl:choose>
                                            <xsl:when test="position() = 1">attested as early as <xsl:value-of select="local:trim-date(@when)"/>
                                            </xsl:when>
                                            <xsl:when test="position()=last()">, as late as <xsl:value-of select="local:trim-date(@when)"/>
                                            </xsl:when>
                                            <xsl:otherwise/>
                                        </xsl:choose>
                                    </xsl:when>
                                            <!-- process @notBefore dates -->
                                    <xsl:when test="./@notBefore">
                                        <xsl:choose>
                                            <xsl:when test="position() = 1">
                                                        attested around <xsl:value-of select="local:trim-date(@notBefore)"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                        attested as early as <xsl:value-of select="local:trim-date(@notBefore)"/>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:when>
                                            <!-- process @notAfter dates -->
                                    <xsl:when test="./@notAfter">
                                        <xsl:if test="./@notBefore">, </xsl:if>as late as <xsl:value-of select="local:trim-date(@notAfter)"/>
                                    </xsl:when>
                                    <xsl:otherwise/>
                                </xsl:choose>
                            </xsl:for-each>)
                                </xsl:if>
                    </xsl:for-each>
                        <!-- Add refs if they exist -->
                    <xsl:if test="@source">
                        <xsl:sequence select="local:do-refs-pdf(@source,'eng')"/>
                    </xsl:if>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- Template to print out confession section -->
    <xsl:template match="t:state[@type='confession']">
        <!-- Get all ancesors of current confession (but only once) -->
        <xsl:variable name="confessions" select="document('/db/apps/srophe/data/confessions/tei/confessions.xml')//t:body/t:list"/>
        <xsl:variable name="id" select="substring-after(@ref,'#')"/>
        <fo:list-item>
            <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
            <fo:list-item-body start-indent="body-start()">
                <fo:block>
                    <xsl:value-of select="$id"/>: 
                    <xsl:for-each select="$confessions//t:item[@xml:id = $id]/ancestor-or-self::*/t:label">
                        <xsl:value-of select="."/>
                    </xsl:for-each>                    
                </fo:block>
            </fo:list-item-body>
        </fo:list-item>
    </xsl:template>
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
        Related Places templates 
        matches the following structure generated by record.xql: 
                <related-items xmlns="http://www.w3.org/1999/xhtml">
                     <relation id="876" 
                             uri="http://syriaca.org/place/876" 
                             varient="passive" 
                             name="contains" 
                             active="#place-602" 
                             passive="http://syriaca.org/place/876 http://syriaca.org/place/1947 http://syriaca.org/place/666 http://syriaca.org/place/507" 
                             source="#bib602-2">
                                <placeName xmlns="http://www.tei-c.org/ns/1.0" xml:id="name876-1" xml:lang="en" syriaca-tags="#syriaca-headword" source="#bib876-1 #bib876-2">Trichur</placeName>
                            </relation>
                            <relation id="1947" uri="http://syriaca.org/place/1947" varient="passive" name="contains" active="#place-602" passive="http://syriaca.org/place/876 http://syriaca.org/place/1947 http://syriaca.org/place/666 http://syriaca.org/place/507" source="#bib602-2">
                                <placeName xmlns="http://www.tei-c.org/ns/1.0" xml:id="name1947-1" xml:lang="en" syriaca-tags="#syriaca-headword" source="#bib1947-1">Kottayam</placeName>
                            </relation>                
                   </related-items> 
  
    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <xsl:template match="t:relation">
        <xsl:variable name="name-string">
            <xsl:choose>
                <!-- Differentiates between resided and other name attributes -->
                <xsl:when test="@name='resided'">
                    <xsl:value-of select="@name"/> in 
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="replace(@name,'-',' ')"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="currentPlace" select="//t:place/t:placeName[1]"/>
        <xsl:choose>
            <xsl:when test="@id=concat('#place-',$placenum)"/>
            <xsl:when test="@varient='active'">
                <fo:list-item>
                    <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                    <fo:list-item-body start-indent="body-start()">
                        <fo:block>
                            <fo:basic-link external-destination="url('http://syriaca.org/place/{@id}')" xsl:use-attribute-sets="href">
                                <xsl:value-of select="t:placeName"/>
                            </fo:basic-link>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="$name-string"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="$currentPlace"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="local:do-dates(.)"/>
                            <xsl:text> </xsl:text>
                        <!-- If footnotes exist call function do-refs pass footnotes and language variables to function -->
                            <xsl:if test="@source">
                                <xsl:sequence select="local:do-refs-pdf(@source,@xml:lang)"/>
                            </xsl:if>
                        </fo:block>
                    </fo:list-item-body>
                </fo:list-item>
            </xsl:when>
            <xsl:when test="@varient='passive'">
                <fo:list-item>
                    <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                    <fo:list-item-body start-indent="body-start()">
                        <fo:block>
                            <xsl:value-of select="$currentPlace"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="$name-string"/>
                            <xsl:text> </xsl:text>
                            <fo:basic-link external-destination="url('{concat('http://syriaca.org/place/',@id)}')" xsl:use-attribute-sets="href">
                                <xsl:value-of select="t:placeName"/>
                            </fo:basic-link>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="local:do-dates(.)"/>
                            <xsl:text> </xsl:text>
                            <!-- If footnotes exist call function do-refs pass footnotes and language variables to function -->
                            <xsl:if test="@source">
                                <xsl:sequence select="local:do-refs-pdf(@source,@xml:lang)"/>
                            </xsl:if>
                        </fo:block>
                    </fo:list-item-body>
                </fo:list-item>
            </xsl:when>
            <xsl:when test="@varient='mutual'">
                <fo:list-item>
                    <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                    <fo:list-item-body start-indent="body-start()">
                        <fo:block>
                            <xsl:value-of select="$currentPlace"/>
                            <xsl:choose>
                                <xsl:when test="count(mutual) = 1"> and </xsl:when>
                                <xsl:when test="count(mutual) &gt; 1">, </xsl:when>
                                <xsl:otherwise/>
                            </xsl:choose>
                            <xsl:for-each select="mutual">
                                <xsl:if test="child::*">
                                    <fo:basic-link external-destination="url('{concat('http://syriaca.org/place/',@id)}')" xsl:use-attribute-sets="href">
                                        <xsl:value-of select="t:placeName"/>
                                    </fo:basic-link>
                                    <xsl:choose>
                                        <xsl:when test="count(following-sibling::*) = 1">, and </xsl:when>
                                        <xsl:when test="count(following-sibling::*) &gt; 1">, </xsl:when>
                                    </xsl:choose>
                                </xsl:if>
                            </xsl:for-each>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="replace(child::*[1]/@name,'-',' ')"/>
                            <xsl:value-of select="local:do-dates(child::*[1])"/>
                            <xsl:text> </xsl:text>
                            <!-- If footnotes exist call function do-refs pass footnotes and language variables to function -->
                            <xsl:if test="child::*[1]/@source">
                                <xsl:sequence select="local:do-refs-pdf(child::*[1]/@source,@xml:lang)"/>
                            </xsl:if>
                        </fo:block>
                    </fo:list-item-body>
                </fo:list-item>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template match="t:location[@type='geopolitical' or @type='relative']">
                <fo:block xsl:use-attribute-sets="p">
                    <fo:inline xsl:use-attribute-sets="bold">Location: </fo:inline>
                    <xsl:apply-templates/>
                    <xsl:sequence select="local:do-refs-pdf(@source,ancestor::t:*[@xml:lang][1])"/>
                </fo:block>
    </xsl:template>
       
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
     handle standard output of 'nested' locations 
     ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <xsl:template match="t:location[@type='nested']">
             <fo:inline>Within 
                    <xsl:for-each select="t:*">
                        <xsl:apply-templates select="."/>
                        <xsl:if test="following-sibling::t:*">
                            <xsl:text> within </xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:text>.</xsl:text>
                    <xsl:sequence select="local:do-refs-pdf(@source,'eng')"/>
                </fo:inline>
    </xsl:template>
    <xsl:template match="t:location[@type='gps' and t:geo]">
        <fo:block xsl:use-attribute-sets="p">
            <fo:inline xsl:use-attribute-sets="bold">Coordinates: </fo:inline>         
            <fo:inline>
                <xsl:value-of select="concat('Lat. ',tokenize(t:geo,' ')[1],'°')"/> 
                <xsl:value-of select="concat('Long. ',tokenize(t:geo,' ')[2],'°')"/>
                <!--            <xsl:value-of select="t:geo"/>-->
                <xsl:sequence select="local:do-refs-pdf(@source,'eng')"/>    
            </fo:inline>            
        </fo:block>
    </xsl:template>
    <xsl:template match="t:offset | t:measure">
        <xsl:apply-templates select="." mode="out-normal"/>
    </xsl:template>
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
     Description templates 
     ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <!-- Descriptions without list elements or paragraph elements -->
    <xsl:template match="t:desc" mode="plain">
        <xsl:apply-templates/>
    </xsl:template>
    <xsl:template match="t:label" mode="plain">
        <xsl:apply-templates/>
    </xsl:template>
    <!-- Descriptions for place abstract  added template for abstracts, handles quotes and references.-->
    <xsl:template match="t:desc[starts-with(@xml:id, 'abstract-en')]" mode="abstract">
        <fo:block margin="8pt" border="1pt solid #eeeeee" padding="8pt">
            <xsl:apply-templates/>
        </fo:block>
    </xsl:template>
    
    <!-- General descriptions within the body of the place element, uses lists -->
    <xsl:template match="t:desc[not(starts-with(@xml:id, 'abstract-en'))]">
        <fo:list-item>
            <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
            <fo:list-item-body start-indent="body-start()">
                <fo:block>
                    <xsl:call-template name="langattr"/>
                    <xsl:apply-templates/>
                </fo:block>
            </fo:list-item-body>
        </fo:list-item>
    </xsl:template>
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
     handle standard output of a listBibl element 
     ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <xsl:template match="t:listBibl">
        <fo:list-block xsl:use-attribute-sets="list-block">
            <xsl:for-each select="t:bibl">
                <fo:list-item>
                    <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                    <fo:list-item-body start-indent="body-start()">
                        <fo:block>
                            <xsl:apply-templates select="." mode="biblist"/>
                            <xsl:text>.</xsl:text>
                        </fo:block>
                    </fo:list-item-body>
                </fo:list-item>
            </xsl:for-each>
        </fo:list-block>
    </xsl:template>
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
     handle standard output of a note element 
     ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <xsl:template match="t:note">
        <xsl:variable name="xmlid" select="@xml:id"/>
        <xsl:choose>
            <!-- Adds definition list for depreciated names -->
            <xsl:when test="@type='deprecation'">
                <fo:block>
                    <fo:block xsl:use-attribute-sets="bold">
                        <xsl:apply-templates select="../t:link[contains(@target,$xmlid)]"/>
                    </fo:block>
                    <fo:block xsl:use-attribute-sets="def-list">
                        <xsl:apply-templates/>
                        <!-- Check for ending punctuation, if none, add . -->
                        <xsl:if test="not(ends-with(.,'.'))">
                            <xsl:text>.</xsl:text>
                        </xsl:if>
                    </fo:block>
                </fo:block>
            </xsl:when>
            <xsl:when test="@type='corrigenda' or @type='incerta'">
                <fo:list-item>
                    <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                    <fo:list-item-body start-indent="body-start()">
                        <fo:block>
                            <xsl:apply-templates/>
                        </fo:block>
                    </fo:list-item-body>
                </fo:list-item>
            </xsl:when>
            <xsl:otherwise>
                <fo:block xsl:use-attribute-sets="p">
                    <xsl:apply-templates/>
                    <!-- Check for ending punctuation, if none, add . -->
                    <xsl:if test="not(ends-with(.,'.'))">
                        <xsl:text>.</xsl:text>
                    </xsl:if>
                </fo:block>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- Handles t:link elements for deperciated notes, pulls value from matching element, output element and footnotes -->
    <xsl:template match="t:link">
        <xsl:variable name="elementID" select="substring-after(substring-before(@target,' '),'#')"/>
        <xsl:for-each select="/descendant-or-self::*[@xml:id=$elementID]">
            <xsl:apply-templates select="."/>
            <!-- NOTE: position last is not working? -->
            <!--   <xsl:if test="not(../preceding-sibling::*[@xml:id=$elementID])"><xsl:text>, </xsl:text></xsl:if>-->
            <xsl:text> </xsl:text>
        </xsl:for-each>
    </xsl:template>

    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
     handle standard output of a p element 
     ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <xsl:template match="t:p">
        <fo:block xsl:use-attribute-sets="p">
            <xsl:call-template name="langattr"/>
            <xsl:apply-templates/>
        </fo:block>
    </xsl:template>
    <xsl:template match="t:quote">
        <xsl:text>“</xsl:text>
        <xsl:apply-templates/>
        <xsl:text>”</xsl:text>
        <xsl:sequence select="local:do-refs-pdf(@source,ancestor::t:*[@xml:lang][1])"/>
    </xsl:template>
    <xsl:template match="t:placeName | t:region | t:settlement">
        <xsl:choose>
            <xsl:when test="@ref">
                <xsl:choose>
                    <xsl:when test="string-length(@ref) &lt; 1"/>
                    <xsl:when test="starts-with(@ref, $uribase)">
                        <xsl:text> </xsl:text>
                        <fo:basic-link external-destination="url('http://syriaca.org/place/{substring-after(@ref, $uribase)}')" xsl:use-attribute-sets="href">
                            <xsl:call-template name="langattr"/>
                            <xsl:apply-templates mode="cleanout"/>
                        </fo:basic-link>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text> </xsl:text>
                        <fo:basic-link external-destination="url('{@ref}')" xsl:use-attribute-sets="href">
                            <xsl:call-template name="langattr"/>
                            <xsl:apply-templates mode="cleanout"/>
                        </fo:basic-link>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <!-- NOTE: added footnotes to all placeNames if available. Uses local do-refs function -->
                <xsl:call-template name="langattr"/>
                <xsl:apply-templates mode="cleanout"/>
                <xsl:sequence select="local:do-refs-pdf(@source,@xml:lang)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template match="t:placeName" mode="list">
        <xsl:variable name="nameID" select="concat('#',@xml:id)"/>
        <xsl:choose>
            <!-- Suppress depreciated names here -->
            <xsl:when test="/descendant-or-self::t:link[substring-before(@target,' ') = $nameID][contains(@target,'deprecation')]"/>
            <!-- Output all other names -->
            <xsl:otherwise>
                <fo:list-item>
                    <fo:list-item-label end-indent="label-end()"><fo:block>&#8226;</fo:block></fo:list-item-label>
                    <fo:list-item-body start-indent="body-start()">
                        <fo:block>
                            <xsl:call-template name="langattr"/>
                            <xsl:apply-templates select="." mode="out-normal-pdf"/>
                            <xsl:sequence select="local:do-refs-pdf(@source,ancestor::t:*[@xml:lang][1])"/>                            
                        </fo:block>
                    </fo:list-item-body>
                </fo:list-item>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
     handle standard output of the licence element in the tei header
     ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <xsl:template match="t:licence">
        <xsl:if test="@target">
            <xsl:variable name="licenserev" select="tokenize(@target, '/')[last()-1]"/>
            <xsl:variable name="licensetype" select="tokenize(substring-before(@target, $licenserev), '/')[last()-1]"/>
            <fo:basic-link external-destination="url('{@target}')" xsl:use-attribute-sets="href">
                <fo:external-graphic src="url('http://i.creativecommons.org/l/{$licensetype}/{$licenserev}/80x15.png')"/>
            </fo:basic-link>
        </xsl:if>
        <xsl:apply-templates/>
    </xsl:template>
    
    <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
     handle standard output of the ref element
     ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <xsl:template match="t:ref">
        <fo:basic-link external-destination="url('{@target}')" xsl:use-attribute-sets="href">
            <xsl:apply-templates/>
        </fo:basic-link>
    </xsl:template>
    <xsl:template name="get-headword-ele" as="element()*">
        <xsl:choose>
            <xsl:when test="./descendant-or-self::t:listPlace/t:place/t:placeName[@syriaca-tags='#syriaca-headword']">
                <xsl:sequence select="./descendant-or-self::t:listPlace/t:place/t:placeName[@syriaca-tags='#syriaca-headword']"/>
            </xsl:when>
            <xsl:otherwise>
<!--                <xsl:message>WARNING: placepage.xsl unable to find placeName tagged with '#syriaca-headword' in <xsl:value-of select="document-uri(.)"/></xsl:message>-->
                <xsl:sequence select="./descendant-or-self::t:listPlace/t:place/t:placeName[1]"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!-- NOTE: where is this used? Seems to be an issue with syrac text-->
    <xsl:template name="get-description-ele" as="element()*">
        <xsl:choose>
            <xsl:when test="./descendant-or-self::t:listPlace/t:place/t:desc[starts-with(@xml:id, 'abstract-en')]">
                <xsl:sequence select="./descendant-or-self::t:listPlace/t:place/t:desc[starts-with(@xml:id, 'abstract-en')]"/>
            </xsl:when>
            <xsl:otherwise>
<!--                <xsl:message>WARNING: placepage.xsl unable to find desc with id that starts with 'abstract-en' in <xsl:value-of select="document-uri(.)"/></xsl:message>-->
                <xsl:sequence select="./descendant-or-self::t:listPlace/t:place/t:desc[1]"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template match="t:placeName[local-name(..)='desc']" mode="cleanout">
        <xsl:apply-templates select="."/>
    </xsl:template>
    <xsl:template match="text()" mode="cleanout">
        <xsl:value-of select="."/>
    </xsl:template>
    <xsl:template match="t:*" mode="cleanout">
        <xsl:apply-templates mode="cleanout"/>
    </xsl:template>
    
    <!-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| -->
    <!-- |||| match=t:*: suppress all TEI elements not otherwise handled -->
    <!-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| -->
    <xsl:template match="t:*"/>
    <xsl:template name="langattr">
        <xsl:if test="@xml:lang">
            <xsl:attribute name="xml:lang">
                <xsl:value-of select="@xml:lang"/>
            </xsl:attribute>
        </xsl:if>
    </xsl:template>
</xsl:stylesheet>